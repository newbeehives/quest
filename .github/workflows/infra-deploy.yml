name: Deploy the Rearc Quest infrastructure using terraform, and run the docker container inside it
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: false
        default: 'debug' 
        type: choice
        options:
        - info
        - warning
        - debug 
  push:
    branches: [ master ]
    paths:
      - 'terraform/**'
      - '.github/workflows/infra*'
      
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_REARC_QUEST_ECR_REPONAME: binu-rearc-quest
      AWS_REARC_QUEST_S3_BUCKET: ${{ secrets.AWS_REARC_QUEST_S3_BUCKET }}
      ENV_NAME: Dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2      
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create the Rearc Quest S3 bucket for terraform state, if not exists
        run: |
          aws s3api create-bucket --bucket ${{ env.AWS_REARC_QUEST_S3_BUCKET }} --region ${{ env.AWS_REGION }} || true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4
          terraform_wrapper: false

      - name: Terraform Deploy
        id: terraform
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AWS_REARC_QUEST_ECR_REPONAME }}
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        run: |
          cd terraform
          terraform init -backend-config="bucket=${{ env.AWS_REARC_QUEST_S3_BUCKET }}" -backend-config="key=$ECR_REPOSITORY/${{ env.ENV_NAME }}.tfstate" -backend-config="region=${{ env.AWS_REGION }}"
          terraform apply -var "aws_region=${{ env.AWS_REGION }}" -var "infra_env=${{ env.ENV_NAME }}" -auto-approve
          terraform output rearc_quest_box_ip
          echo QUEST_BOX_IP=$(terraform output -raw rearc_quest_box_ip) >> $GITHUB_ENV
          echo QUEST_BOX_IP=${{ env.QUEST_BOX_IP }}
          
      - name: Install the docker container apps for Rearc Quest onto the EC2 machine
        id: remote-ssh
        uses: appleboy/ssh-action@master
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          REARC_QUEST_SECRET_WORD: ${{ secrets.REARC_QUEST_SECRET_WORD }}
        with:
          host: ${{ env.QUEST_BOX_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY_PEM }}
          port: 22
          envs: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION
          script: | 
            whoami
            sudo aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            sudo aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            sudo aws configure set default.region ${{ env.AWS_REGION }}
            sudo aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.AWS_REARC_QUEST_ECR_REPONAME }}:latest            
            sudo docker start ${{ env.AWS_REARC_QUEST_ECR_REPONAME }} || sudo docker run -e "SECRET_WORD=${{ env.REARC_QUEST_SECRET_WORD }}" -d -p 3000:3000 --name ${{ env.AWS_REARC_QUEST_ECR_REPONAME }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.AWS_REARC_QUEST_ECR_REPONAME }}:latest          
  
